<form
  action="https://app.headlessforms.cloud/api/v1/form-submission/xIH9McNlU9"
  method="post"
  role="form"
  class="email-form"
>
  <div class="row">
    <div class="col-md-6 form-group">
      <input
        id="name"
        name="name"
        type="text"
        class="form-control"
        placeholder="Name"
        required
      />
    </div>
    <div class="col-md-6 form-group mt-4 mt-md-0">
      <input
        id="email"
        name="email"
        type="email"
        class="form-control"
        placeholder="Email"
        required
      />
    </div>
  </div>

  <div class="row mt-4">
    <div class="col-md-6 form-group">
      <input
        id="phone"
        name="phone"
        type="text"
        class="form-control"
        placeholder="Phone"
        required
      />
    </div>
    <div class="col-md-6 form-group mt-4 mt-md-0">
      <input
        id="address"
        name="address"
        type="text"
        class="form-control"
        placeholder="Address"
        required
      />
    </div>
  </div>
  <div class="form-group mt-4">
    <textarea
      id="message"
      class="form-control"
      name="message"
      rows="4"
      required
      placeholder="Additional Details!"></textarea>
  </div>
  <div class="mt-4">
    <div class="loading">Loading</div>
    <div class="error-message"></div>
    <div class="sent-message">Your message has been sent. Thank you!</div>
  </div>
  <div class="mt-4">
    <button type="submit">Submit Request</button>
  </div>
</form>

<script>
  import {
    BodyContentType,
    Configuration,
    EmailsApi,
    EmailMessageData,
  } from "@elasticemail/elasticemail-client-ts-axios";

  (function () {
    let forms = document.querySelectorAll(".email-form");
    forms.forEach((e: Element) => {
      e.addEventListener(
        "submit",
        function (this: HTMLFormElement, event: Event) {
          event.preventDefault();

          let thisForm = this;
          let action = thisForm.getAttribute("action");
          if (!action) {
            displayError(thisForm, "The form action property is not set!");
            return;
          }

          thisForm.querySelector(".loading")!.classList.add("d-block");
          thisForm.querySelector(".error-message")!.classList.remove("d-block");
          thisForm.querySelector(".sent-message")!.classList.remove("d-block");

          let formData = new FormData(thisForm);
          let name = formData.get("name");
          let email = formData.get("email");

          var msg = "";
          msg += "Name: " + name + "\n\r";
          msg += "Email: " + email + "\n\r";
          msg += "Phone: " + formData.get("phone") + "\n\r";
          msg += "Address: " + formData.get("address") + "\n\r";
          msg += "Additional Details: " + formData.get("message") + "\n\r";

          const config = new Configuration({
            apiKey: import.meta.env.SITE_KEY,
          });

          const emailsApi = new EmailsApi(config);

          const emailMessageData = {
            Recipients: [
              {
                Email: email ? email.toString() : "",
                Fields: {
                  name: name ? name.toString() : "",
                },
              },
            ],
            Content: {
              Body: [
                {
                  ContentType: "PlainText" as BodyContentType,
                  Content: msg,
                  Charset: "utf-8",
                },
              ],
              From: "bijiasuo2006@hotmail.com",
              Subject: `Message from ${name} (${email})`,
            },
          };

          const sendBulkEmails = (emailMessageData: EmailMessageData): void => {
            emailsApi
              .emailsPost(emailMessageData)
              .then((response) => {
                thisForm.querySelector(".loading")!.classList.remove("d-block");
                thisForm
                  .querySelector(".sent-message")!
                  .classList.add("d-block");
                thisForm.reset();
                console.log(response.data);
              })
              .catch((error) => {
                displayError(thisForm, error);
              });
          };

          sendBulkEmails(emailMessageData);
        }
      );
    });

    const displayError = (thisForm: HTMLElement, error: string) => {
      thisForm.querySelector(".loading")!.classList.remove("d-block");
      thisForm.querySelector(".error-message")!.innerHTML = error;
      thisForm.querySelector(".error-message")!.classList.add("d-block");
    };
  })();
</script>
